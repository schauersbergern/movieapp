apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.task.movie"
        minSdkVersion 17
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }


    dataBinding {
        enabled = true
    }

    buildTypes {

        debug {
            buildConfigField "boolean", "LOG", "true"
            buildConfigField "boolean", "RETROFIT_LOG_INTERCEPTOR", "true"

            //*Dev BASE URL
            buildConfigField "String", "BASE_URL", '"https://api.themoviedb.org/3/"'
            buildConfigField "String", "API_KEY", '""'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        rc {
            // To display log and log interceptor
            buildConfigField "boolean", "LOG", "false"
            buildConfigField "boolean", "RETROFIT_LOG_INTERCEPTOR", "false"
            //Staging BASE URL
            buildConfigField "String", "BASE_URL", '"https://api.themoviedb.org/3/"'
            buildConfigField "String", "API_KEY", '""'
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }


        release {

            // To display log and log interceptor
            buildConfigField "boolean", "LOG", "false"
            buildConfigField "boolean", "RETROFIT_LOG_INTERCEPTOR", "false"
            // Production BASE URL
            buildConfigField "String", "BASE_URL", '"https://api.themoviedb.org/3/"'
            buildConfigField "String", "API_KEY", '""'
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'com.android.support:multidex:1.0.3'


    implementation "com.github.kittinunf.result:result:2.2.0"
    implementation "com.github.kittinunf.result:result-coroutines:2.2.0"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.1"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.1"

    /*Koin*/
    implementation "org.koin:koin-android:2.0.1"
    implementation "org.koin:koin-androidx-scope:2.0.1"
    implementation "org.koin:koin-androidx-viewmodel:2.0.1"


    /* Recycler Delegates */
    implementation "com.hannesdorfmann:adapterdelegates4:4.2.0"
    implementation "com.hannesdorfmann:adapterdelegates4-pagination:4.2.0"
    

    /*Kotlin Configure */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'

    /* Testing Library*/
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'org.mockito:mockito-core:2.25.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation  "androidx.test:core-ktx:1.1.0"
    androidTestImplementation "io.mockk:mockk:1.9.3"
    androidTestImplementation "io.mockk:mockk-android:1.9.3"

    testImplementation "io.mockk:mockk:1.9.3"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.1"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.1"

    /*Android Architecture Component - LiveData & ViewModel  */
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    /*Android Architecture Component - ConstraintLayout  */
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'



    /* Retrofit using RxJava2, Okhttp, Okhttp logging interceptor, Gson */
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-jackson:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.2.2'
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "io.reactivex.rxjava2:rxjava:$rx_java_version"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'



    /* Android Support Library: RecyclerView, CardView */
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "com.android.support:recyclerview-v7:$android_support_version"
    implementation 'androidx.cardview:cardview:1.0.0'

    /*  picasso lib for image loading*/
    implementation 'com.squareup.picasso:picasso:2.71828'


    // Data Binding
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    /* Dagger2 - We are going to use dagger.android which includes
    * support for Activity and fragment injection so we need to include
    * the following dependencies */
    implementation "com.google.dagger:dagger:$dagger2_version"
    kapt "com.google.dagger:dagger-compiler:$dagger2_version"
    annotationProcessor 'com.google.dagger:dagger-compiler:2.23.2'
    compileOnly "org.glassfish:javax.annotation:3.1.1"
    implementation 'com.google.android.material:material:1.0.0'


}
